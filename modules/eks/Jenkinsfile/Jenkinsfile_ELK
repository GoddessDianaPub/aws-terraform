def notifySlack(buildStatus = null) {
    // Build status of null means success.
    buildStatus = buildStatus ?: 'SUCCESS'
    def color

    if (buildStatus == 'SUCCESS') {
        color = '#5dff54'
    } else if (buildStatus == 'UNSTABLE') {
        color = '#fffe89'
    } else {
        color = '#ff0000'
    }

    def msg = "${buildStatus}:\nJob Name: ${env.JOB_NAME}\nBuild Number #${env.BUILD_NUMBER}"
    slackSend(color: color, message: msg, channel: '#jenkins-notifications')
}

pipeline {
    agent {
        node {
            label 'linux'
        }
    }
    
    environment {
        AWS_DEFAULT_REGION    = "us-east-1"
        REPO_URL              = "https://github.com/GoddessDianaPub/aws-terraform.git"
        CLUSTER_NAME          = "opsschool-eks-SowNYaBY"
        JENKINS_AWS_CRED      = "jenkins"
    }
    
    stages {
        stage('Cloning Git') {
            steps {
                git url: "${REPO_URL}", branch: 'main', credentialsId: 'Github_token'
            }
        } 
        
        stage ("Login to EKS") {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: "${env.JENKINS_AWS_CRED}", secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                sh "aws eks --region=${AWS_DEFAULT_REGION} update-kubeconfig --name ${CLUSTER_NAME}"
                }
            }
        }
            
        stage('Check Helm Installation') {
            steps {
                script {
                    def helmInstalled = sh(script: 'command -v helm', returnStatus: true)
                    if (helmInstalled == 0) {
                        echo 'Helm is already installed. Skipping installation.'
                    } else {
                        echo 'Helm not found. Installing Helm...'
                        sh 'curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null'
                        sh 'sudo apt-get install apt-transport-https --yes'
                        sh 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list'
                        sh 'sudo apt-get update'
                        sh 'sudo apt-get install helm'
                    }
                }
            }
        }    
        
        stage('Configure elastic helm repo') {
            steps {
                script {
                    sh 'helm repo add elastic https://helm.elastic.co'
		            sh 'helm repo update'
                }
            }
        }

        stage('Create filebeat resources') {
            steps {
                script {
                    withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: "${env.JENKINS_AWS_CRED}", secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh 'kubectl apply -f modules/eks/manifests/logging-manifests/filebeat-resources.yaml'
                    }
                }
            }
        }
		
        stage('Install filebeat Helm Chart') {
            steps {
                script {
                    try {
                        sh 'helm install filebeat elastic/filebeat -f modules/eks/manifests/logging-manifests/filebeat_values.yaml --namespace filebeat'
                    } catch (Exception e) {
                        echo "Consul Helm chart is already installed in the 'consul' namespace. Skipping installation."
                    }
                }
            }
        }
		
    }
    
    post {
        always {
            notifySlack(currentBuild.result)
            script {
                deleteDir() // built-in step to clean up the workspace
            }
        }
    }
}
 

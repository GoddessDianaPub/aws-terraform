def notifySlack(buildStatus = null) {
    // Build status of null means success.
    buildStatus = buildStatus ?: 'SUCCESS'
    def color

    if (buildStatus == 'SUCCESS') {
        color = '#5dff54'
    } else if (buildStatus == 'UNSTABLE') {
        color = '#fffe89'
    } else {
        color = '#ff0000'
    }

    def msg = "${buildStatus}:\nJob Name: ${env.JOB_NAME}\nBuild Number #${env.BUILD_NUMBER}"
    slackSend(color: color, message: msg, channel: '#jenkins-notifications')
}

pipeline {
    agent {
        node {
            label 'linux'
        }
    }
    
    environment {
        AWS_DEFAULT_REGION    = "us-east-1"
        REPO_URL              = "https://github.com/GoddessDianaPub/aws-terraform.git"
        CLUSTER_NAME          = "opsschool-eks-SowNYaBY"
    }
    
    stages {
        stage('Cloning Git') {
            steps {
                git url: "${REPO_URL}", branch: 'main', credentialsId: 'Github_token'
            }
        } 

        stage ("Login to EKS") {
            steps {
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: "${env.JENKINS_AWS_CRED}", secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                sh "aws eks --region=${AWS_DEFAULT_REGION} update-kubeconfig --name ${CLUSTER_NAME}"
                }
            }
        }

        
        stage('Update ConfigMap') {
            steps {
                script {
                    def additionalData = """
                      mapUsers: |
                        - userarn: arn:aws:iam::735911875499:user/jenkins
                          groups:
                          - system:masters
                          username: jenkins
                    """
                    withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: "${env.JENKINS_AWS_CRED}", secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    // Get the existing ConfigMap data using kubectl
                    def currentConfigMap = sh(script: 'kubectl get configmap kube-system -n kube-system -o yaml', returnStdout: true)
                    
                    // Combine the existing data with the additional data
                    def updatedConfigMapData = currentConfigMap.trim() + "\n" + additionalData
                    
                    // Patch the ConfigMap using kubectl
                    sh("echo '${updatedConfigMapData}' | kubectl apply -n kube-system -f -")
                    }
                }
            }
        }
		

    }    
    post {
        always {
            notifySlack(currentBuild.result)
            script {
                deleteDir() // built-in step to clean up the workspace
            }
        }
    }
}
